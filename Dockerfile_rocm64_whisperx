# Docker Buildfile for ROCm 6.4 for Whisper-WebUI/whisperX/CTranslate2-rocm 
# use a RX5(x)0 / Polaris / gfx803 AMD GPU with ROCm 6.4
# created, build and compiled by Robert Rosenbusch at December 2024 / May 2025

### Build rocm64_gfx803_base:6.4 first! Read the README.md, it could save lifetime :P
FROM rocm6_gfx803_base:6.4

SHELL ["/bin/bash", "-c"]  
ENV WHISPERX_GUI_PORT=7860 \
    DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONENCODING==UTF-8 \
    REQS_FILE='requirements.txt' \
    COMMANDLINE_ARGS='' \
    PIP_ROOT_USER_ACTION='ignore' \
    ### For your AMD GPU
    PYTORCH_ROCM_ARCH=gfx803 
    
###########
### Build PyTorch
###########
WORKDIR /    
ENV PYTORCH_GIT_VERSION="release/2.6"
RUN echo "** Checkout PyTorch: ${PYTORCH_GIT_VERSION} **" && \  
    git clone --recursive https://github.com/ROCm/pytorch.git -b ${PYTORCH_GIT_VERSION} /pytorch && \
    true

WORKDIR /pytorch
RUN echo "** BUILDING PYTORCH *** " && \ 
    python3 --version && \
    dpkg -r --force-depends python3-yaml python3-filelock &&\
    mkdir -p /pytorch/dist && \
    python3 setup.py clean && \
    pip3 install --break-system-packages -r ${REQS_FILE} && \
    python3 tools/amd_build/build_amd.py && \
    python3 setup.py bdist_wheel && \
    pip3 install --break-system-packages dist/torch*.whl && \
    true     

###########
### Build TorchVision
###########
ENV TORCH_GIT_VERSION="release/0.21"
RUN echo "** Checkout Torchvision Version: ${TORCH_GIT_VERSION} ** " && \ 
   git clone https://github.com/pytorch/vision.git -b ${TORCH_GIT_VERSION} /vision && \
   true

WORKDIR /vision
RUN echo "** BUILDING PYTORCH *** " && \ 
    python3 setup.py bdist_wheel && \
    pip install --break-system-packages  dist/torchvision-*.whl && \
    mkdir -p /vision/dist && \
    true

###########
### Build TorchAudio
###########
ENV TORCHAUDIO_GIT_VERSION="v2.6.0"
RUN echo "** Checkout Torchaudio Version: ${TORCHAUDIO_GIT_VERSION} **" && \ 
    git clone https://github.com/pytorch/audio.git -b ${TORCHAUDIO_GIT_VERSION} /audio && \
    true

WORKDIR /audio
RUN echo "** BUILDING Torchaudio **" && \
    python3 setup.py bdist_wheel && \
    pip install --break-system-packages dist/*.whl && \
    true 

######
# End of building pytorch and torchvision WHL-Files
###########

##### Prepare Conda for CTranslate-for-ROCm
## Install miniconda for WhisperX
WORKDIR /
RUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh &&\
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    echo "export PATH=/opt/conda/bin:$PATH" > /etc/profile.d/conda.sh &&\
    echo PATH=/opt/conda/bin:$PATH >> /etc/environment && \
    export PATH=/opt/conda/bin:$PATH &&\
    true

RUN /opt/conda/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main \
 && /opt/conda/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r

RUN /opt/conda/bin/conda update -n base -c defaults conda &&\
    /opt/conda/bin/conda create -n py_3.12 python=3.12 &&\    
    /opt/conda/bin/conda init &&\
    true 

SHELL ["/opt/conda/bin/conda", "run", "--no-capture-output", "-n", "py_3.12", "/bin/bash", "-c"]    

### Install libc++ Conda-Libs to compile CTranslate-for-rocm
RUN /opt/conda/bin/conda install -y -c conda-forge libstdcxx-ng=12 &&\
    /opt/conda/bin/conda install -y -c conda-forge libstdcxx-ng=13 &&\
    true

### Checkout and Prepare CTranslate-for-ROCm
RUN git clone https://github.com/arlo-phoenix/CTranslate2-rocm.git --recurse-submodules /CTranslate2-rocm && \
    true 

### Compile and build WHL CTranslate-for-ROCm
WORKDIR /CTranslate2-rocm
RUN CLANG_CMAKE_CXX_COMPILER=amdclang++ CXX=amdclang++ HIPCXX="$(hipconfig -l)/clang" HIP_PATH="$(hipconfig -R)" cmake -S . -B build -DWITH_MKL=OFF -DWITH_HIP=ON -DCMAKE_HIP_ARCHITECTURES=$PYTORCH_ROCM_ARCH -DBUILD_TESTS=ON -DWITH_CUDNN=ON &&\
    cmake --build build -- -j $MAX_JOBS &&\
    cd build &&\
    true 

WORKDIR /CTranslate2-rocm/build
RUN cmake --install . --prefix $CONDA_PREFIX && \
    ldconfig &&\
    true

WORKDIR /CTranslate2-rocm/python
RUN pip install -r install_requirements.txt &&\
    python3 setup.py bdist_wheel &&\
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/ &&\
    pip install dist/*.whl &&\
    echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH >> /etc/environment && \
    true

## Checkout Whisper-WebUI       
WORKDIR /     
RUN git clone https://github.com/jhj0517/Whisper-WebUI.git &&\
    true

### Install Whisper-WebUI and reinstall all necesarry WHL into the Python Environment    
WORKDIR /Whisper-WebUI
RUN python3 -m venv venv && \
    ./venv/bin/python3 -m pip install --upgrade pip && \
    ./venv/bin/pip install -r requirements.txt && \
    ./venv/bin/pip install gradio gradio_i18n &&\
    ./venv/bin/pip install whisperx &&\
    ./venv/bin/pip uninstall -y torch torchvision torchaudio && \    
    ./venv/bin/pip install /pytorch/dist/*.whl && \
    ./venv/bin/pip install /vision/dist/*.whl && \
    ./venv/bin/pip install /audio/dist/*.whl && \
    ./venv/bin/pip install --force-reinstall  /CTranslate2-rocm/python/dist/*.whl &&\    
    ./venv/bin/python3 -m pip uninstall numpy -y && \
    ./venv/bin/pip install numpy==1.26.4 &&\
    true    

### Create a best practice Shell Script to start WhisperX
RUN touch whisp.sh && \
    echo "#!/bin/bash" > whisp.sh && \
    echo "./venv/bin/python3 app.py --whisper_type faster-whisper --share --server_name 0.0.0.0 --server_port ${WHISPERX_GUI_PORT}" >> whisp.sh && \
    chmod +x whisp.sh && \
    true    

EXPOSE ${WHISPERX_GUI_PORT}
ENTRYPOINT ["/bin/bash", "/Whisper-WebUI/whisp.sh"]
